// source: board/board.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.board.DTOAction', null, global);
goog.exportSymbol('proto.board.DTOActionConfig', null, global);
goog.exportSymbol('proto.board.DTOActionField', null, global);
goog.exportSymbol('proto.board.DTOActionFieldValue', null, global);
goog.exportSymbol('proto.board.DTOActionStatus', null, global);
goog.exportSymbol('proto.board.DTOActionTemplate', null, global);
goog.exportSymbol('proto.board.DTOActionType', null, global);
goog.exportSymbol('proto.board.DTOBoard', null, global);
goog.exportSymbol('proto.board.DTOCardView', null, global);
goog.exportSymbol('proto.board.DTOColumn', null, global);
goog.exportSymbol('proto.board.GetBoardRequest', null, global);
goog.exportSymbol('proto.board.GetBoardResponse', null, global);
goog.exportSymbol('proto.board.UpdateActionBoardOrderingRequest', null, global);
goog.exportSymbol('proto.board.UseType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.board.GetBoardRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.board.GetBoardRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.board.GetBoardRequest.displayName = 'proto.board.GetBoardRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.board.UpdateActionBoardOrderingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.board.UpdateActionBoardOrderingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.board.UpdateActionBoardOrderingRequest.displayName = 'proto.board.UpdateActionBoardOrderingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.board.GetBoardResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.board.GetBoardResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.board.GetBoardResponse.displayName = 'proto.board.GetBoardResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.board.DTOBoard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.board.DTOBoard.repeatedFields_, null);
};
goog.inherits(proto.board.DTOBoard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.board.DTOBoard.displayName = 'proto.board.DTOBoard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.board.DTOColumn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.board.DTOColumn.repeatedFields_, null);
};
goog.inherits(proto.board.DTOColumn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.board.DTOColumn.displayName = 'proto.board.DTOColumn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.board.DTOActionStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.board.DTOActionStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.board.DTOActionStatus.displayName = 'proto.board.DTOActionStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.board.DTOAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.board.DTOAction.repeatedFields_, null);
};
goog.inherits(proto.board.DTOAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.board.DTOAction.displayName = 'proto.board.DTOAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.board.DTOActionFieldValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.board.DTOActionFieldValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.board.DTOActionFieldValue.displayName = 'proto.board.DTOActionFieldValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.board.DTOActionType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.board.DTOActionType.repeatedFields_, null);
};
goog.inherits(proto.board.DTOActionType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.board.DTOActionType.displayName = 'proto.board.DTOActionType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.board.DTOActionTemplate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.board.DTOActionTemplate.repeatedFields_, null);
};
goog.inherits(proto.board.DTOActionTemplate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.board.DTOActionTemplate.displayName = 'proto.board.DTOActionTemplate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.board.DTOActionConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.board.DTOActionConfig.repeatedFields_, null);
};
goog.inherits(proto.board.DTOActionConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.board.DTOActionConfig.displayName = 'proto.board.DTOActionConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.board.DTOCardView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.board.DTOCardView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.board.DTOCardView.displayName = 'proto.board.DTOCardView';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.board.DTOActionField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.board.DTOActionField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.board.DTOActionField.displayName = 'proto.board.DTOActionField';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.board.GetBoardRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.board.GetBoardRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.board.GetBoardRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.GetBoardRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.board.GetBoardRequest}
 */
proto.board.GetBoardRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.board.GetBoardRequest;
  return proto.board.GetBoardRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.board.GetBoardRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.board.GetBoardRequest}
 */
proto.board.GetBoardRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.board.GetBoardRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.board.GetBoardRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.board.GetBoardRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.GetBoardRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.board.GetBoardRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.GetBoardRequest} returns this
 */
proto.board.GetBoardRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.board.UpdateActionBoardOrderingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.board.UpdateActionBoardOrderingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.board.UpdateActionBoardOrderingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.UpdateActionBoardOrderingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
actionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
rankValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
statusId: jspb.Message.getFieldWithDefault(msg, 3, ""),
columnId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.board.UpdateActionBoardOrderingRequest}
 */
proto.board.UpdateActionBoardOrderingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.board.UpdateActionBoardOrderingRequest;
  return proto.board.UpdateActionBoardOrderingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.board.UpdateActionBoardOrderingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.board.UpdateActionBoardOrderingRequest}
 */
proto.board.UpdateActionBoardOrderingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRankValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatusId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumnId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.board.UpdateActionBoardOrderingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.board.UpdateActionBoardOrderingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.board.UpdateActionBoardOrderingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.UpdateActionBoardOrderingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRankValue();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getStatusId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getColumnId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string action_id = 1;
 * @return {string}
 */
proto.board.UpdateActionBoardOrderingRequest.prototype.getActionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.UpdateActionBoardOrderingRequest} returns this
 */
proto.board.UpdateActionBoardOrderingRequest.prototype.setActionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float rank_value = 2;
 * @return {number}
 */
proto.board.UpdateActionBoardOrderingRequest.prototype.getRankValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.board.UpdateActionBoardOrderingRequest} returns this
 */
proto.board.UpdateActionBoardOrderingRequest.prototype.setRankValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string status_id = 3;
 * @return {string}
 */
proto.board.UpdateActionBoardOrderingRequest.prototype.getStatusId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.UpdateActionBoardOrderingRequest} returns this
 */
proto.board.UpdateActionBoardOrderingRequest.prototype.setStatusId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string column_id = 4;
 * @return {string}
 */
proto.board.UpdateActionBoardOrderingRequest.prototype.getColumnId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.UpdateActionBoardOrderingRequest} returns this
 */
proto.board.UpdateActionBoardOrderingRequest.prototype.setColumnId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.board.GetBoardResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.board.GetBoardResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.board.GetBoardResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.GetBoardResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
board: (f = msg.getBoard()) && proto.board.DTOBoard.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.board.GetBoardResponse}
 */
proto.board.GetBoardResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.board.GetBoardResponse;
  return proto.board.GetBoardResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.board.GetBoardResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.board.GetBoardResponse}
 */
proto.board.GetBoardResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.board.DTOBoard;
      reader.readMessage(value,proto.board.DTOBoard.deserializeBinaryFromReader);
      msg.setBoard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.board.GetBoardResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.board.GetBoardResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.board.GetBoardResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.GetBoardResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoard();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.board.DTOBoard.serializeBinaryToWriter
    );
  }
};


/**
 * optional DTOBoard board = 1;
 * @return {?proto.board.DTOBoard}
 */
proto.board.GetBoardResponse.prototype.getBoard = function() {
  return /** @type{?proto.board.DTOBoard} */ (
    jspb.Message.getWrapperField(this, proto.board.DTOBoard, 1));
};


/**
 * @param {?proto.board.DTOBoard|undefined} value
 * @return {!proto.board.GetBoardResponse} returns this
*/
proto.board.GetBoardResponse.prototype.setBoard = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.board.GetBoardResponse} returns this
 */
proto.board.GetBoardResponse.prototype.clearBoard = function() {
  return this.setBoard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.board.GetBoardResponse.prototype.hasBoard = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.board.DTOBoard.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.board.DTOBoard.prototype.toObject = function(opt_includeInstance) {
  return proto.board.DTOBoard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.board.DTOBoard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.DTOBoard.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
description: jspb.Message.getFieldWithDefault(msg, 3, ""),
columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.board.DTOColumn.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.board.DTOBoard}
 */
proto.board.DTOBoard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.board.DTOBoard;
  return proto.board.DTOBoard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.board.DTOBoard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.board.DTOBoard}
 */
proto.board.DTOBoard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = new proto.board.DTOColumn;
      reader.readMessage(value,proto.board.DTOColumn.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.board.DTOBoard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.board.DTOBoard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.board.DTOBoard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.DTOBoard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.board.DTOColumn.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.board.DTOBoard.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOBoard} returns this
 */
proto.board.DTOBoard.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.board.DTOBoard.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOBoard} returns this
 */
proto.board.DTOBoard.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.board.DTOBoard.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOBoard} returns this
 */
proto.board.DTOBoard.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated DTOColumn columns = 4;
 * @return {!Array<!proto.board.DTOColumn>}
 */
proto.board.DTOBoard.prototype.getColumnsList = function() {
  return /** @type{!Array<!proto.board.DTOColumn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.board.DTOColumn, 4));
};


/**
 * @param {!Array<!proto.board.DTOColumn>} value
 * @return {!proto.board.DTOBoard} returns this
*/
proto.board.DTOBoard.prototype.setColumnsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.board.DTOColumn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.board.DTOColumn}
 */
proto.board.DTOBoard.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.board.DTOColumn, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.board.DTOBoard} returns this
 */
proto.board.DTOBoard.prototype.clearColumnsList = function() {
  return this.setColumnsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.board.DTOColumn.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.board.DTOColumn.prototype.toObject = function(opt_includeInstance) {
  return proto.board.DTOColumn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.board.DTOColumn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.DTOColumn.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
description: jspb.Message.getFieldWithDefault(msg, 3, ""),
order: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
actionStatusesList: jspb.Message.toObjectList(msg.getActionStatusesList(),
    proto.board.DTOActionStatus.toObject, includeInstance),
actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.board.DTOAction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.board.DTOColumn}
 */
proto.board.DTOColumn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.board.DTOColumn;
  return proto.board.DTOColumn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.board.DTOColumn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.board.DTOColumn}
 */
proto.board.DTOColumn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOrder(value);
      break;
    case 5:
      var value = new proto.board.DTOActionStatus;
      reader.readMessage(value,proto.board.DTOActionStatus.deserializeBinaryFromReader);
      msg.addActionStatuses(value);
      break;
    case 6:
      var value = new proto.board.DTOAction;
      reader.readMessage(value,proto.board.DTOAction.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.board.DTOColumn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.board.DTOColumn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.board.DTOColumn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.DTOColumn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOrder();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getActionStatusesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.board.DTOActionStatus.serializeBinaryToWriter
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.board.DTOAction.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.board.DTOColumn.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOColumn} returns this
 */
proto.board.DTOColumn.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.board.DTOColumn.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOColumn} returns this
 */
proto.board.DTOColumn.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.board.DTOColumn.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOColumn} returns this
 */
proto.board.DTOColumn.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional float order = 4;
 * @return {number}
 */
proto.board.DTOColumn.prototype.getOrder = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.board.DTOColumn} returns this
 */
proto.board.DTOColumn.prototype.setOrder = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * repeated DTOActionStatus action_statuses = 5;
 * @return {!Array<!proto.board.DTOActionStatus>}
 */
proto.board.DTOColumn.prototype.getActionStatusesList = function() {
  return /** @type{!Array<!proto.board.DTOActionStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.board.DTOActionStatus, 5));
};


/**
 * @param {!Array<!proto.board.DTOActionStatus>} value
 * @return {!proto.board.DTOColumn} returns this
*/
proto.board.DTOColumn.prototype.setActionStatusesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.board.DTOActionStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.board.DTOActionStatus}
 */
proto.board.DTOColumn.prototype.addActionStatuses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.board.DTOActionStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.board.DTOColumn} returns this
 */
proto.board.DTOColumn.prototype.clearActionStatusesList = function() {
  return this.setActionStatusesList([]);
};


/**
 * repeated DTOAction actions = 6;
 * @return {!Array<!proto.board.DTOAction>}
 */
proto.board.DTOColumn.prototype.getActionsList = function() {
  return /** @type{!Array<!proto.board.DTOAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.board.DTOAction, 6));
};


/**
 * @param {!Array<!proto.board.DTOAction>} value
 * @return {!proto.board.DTOColumn} returns this
*/
proto.board.DTOColumn.prototype.setActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.board.DTOAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.board.DTOAction}
 */
proto.board.DTOColumn.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.board.DTOAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.board.DTOColumn} returns this
 */
proto.board.DTOColumn.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.board.DTOActionStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.board.DTOActionStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.board.DTOActionStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.DTOActionStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
description: jspb.Message.getFieldWithDefault(msg, 3, ""),
typeKey: jspb.Message.getFieldWithDefault(msg, 4, ""),
typeName: jspb.Message.getFieldWithDefault(msg, 5, ""),
typeDescription: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.board.DTOActionStatus}
 */
proto.board.DTOActionStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.board.DTOActionStatus;
  return proto.board.DTOActionStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.board.DTOActionStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.board.DTOActionStatus}
 */
proto.board.DTOActionStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeKey(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.board.DTOActionStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.board.DTOActionStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.board.DTOActionStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.DTOActionStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTypeKey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTypeName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTypeDescription();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.board.DTOActionStatus.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOActionStatus} returns this
 */
proto.board.DTOActionStatus.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.board.DTOActionStatus.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOActionStatus} returns this
 */
proto.board.DTOActionStatus.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.board.DTOActionStatus.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOActionStatus} returns this
 */
proto.board.DTOActionStatus.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string type_key = 4;
 * @return {string}
 */
proto.board.DTOActionStatus.prototype.getTypeKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOActionStatus} returns this
 */
proto.board.DTOActionStatus.prototype.setTypeKey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string type_name = 5;
 * @return {string}
 */
proto.board.DTOActionStatus.prototype.getTypeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOActionStatus} returns this
 */
proto.board.DTOActionStatus.prototype.setTypeName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string type_description = 6;
 * @return {string}
 */
proto.board.DTOActionStatus.prototype.getTypeDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOActionStatus} returns this
 */
proto.board.DTOActionStatus.prototype.setTypeDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.board.DTOAction.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.board.DTOAction.prototype.toObject = function(opt_includeInstance) {
  return proto.board.DTOAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.board.DTOAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.DTOAction.toObject = function(includeInstance, msg) {
  var f, obj = {
order: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
columnId: jspb.Message.getFieldWithDefault(msg, 2, ""),
id: jspb.Message.getFieldWithDefault(msg, 4, ""),
index: jspb.Message.getFieldWithDefault(msg, 5, 0),
status: (f = msg.getStatus()) && proto.board.DTOActionStatus.toObject(includeInstance, f),
type: (f = msg.getType()) && proto.board.DTOActionType.toObject(includeInstance, f),
fieldsValueList: jspb.Message.toObjectList(msg.getFieldsValueList(),
    proto.board.DTOActionFieldValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.board.DTOAction}
 */
proto.board.DTOAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.board.DTOAction;
  return proto.board.DTOAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.board.DTOAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.board.DTOAction}
 */
proto.board.DTOAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOrder(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumnId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 6:
      var value = new proto.board.DTOActionStatus;
      reader.readMessage(value,proto.board.DTOActionStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 7:
      var value = new proto.board.DTOActionType;
      reader.readMessage(value,proto.board.DTOActionType.deserializeBinaryFromReader);
      msg.setType(value);
      break;
    case 8:
      var value = new proto.board.DTOActionFieldValue;
      reader.readMessage(value,proto.board.DTOActionFieldValue.deserializeBinaryFromReader);
      msg.addFieldsValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.board.DTOAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.board.DTOAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.board.DTOAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.DTOAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrder();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getColumnId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.board.DTOActionStatus.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.board.DTOActionType.serializeBinaryToWriter
    );
  }
  f = message.getFieldsValueList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.board.DTOActionFieldValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional float order = 1;
 * @return {number}
 */
proto.board.DTOAction.prototype.getOrder = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.board.DTOAction} returns this
 */
proto.board.DTOAction.prototype.setOrder = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional string column_id = 2;
 * @return {string}
 */
proto.board.DTOAction.prototype.getColumnId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOAction} returns this
 */
proto.board.DTOAction.prototype.setColumnId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string id = 4;
 * @return {string}
 */
proto.board.DTOAction.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOAction} returns this
 */
proto.board.DTOAction.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 index = 5;
 * @return {number}
 */
proto.board.DTOAction.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.board.DTOAction} returns this
 */
proto.board.DTOAction.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional DTOActionStatus status = 6;
 * @return {?proto.board.DTOActionStatus}
 */
proto.board.DTOAction.prototype.getStatus = function() {
  return /** @type{?proto.board.DTOActionStatus} */ (
    jspb.Message.getWrapperField(this, proto.board.DTOActionStatus, 6));
};


/**
 * @param {?proto.board.DTOActionStatus|undefined} value
 * @return {!proto.board.DTOAction} returns this
*/
proto.board.DTOAction.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.board.DTOAction} returns this
 */
proto.board.DTOAction.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.board.DTOAction.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional DTOActionType type = 7;
 * @return {?proto.board.DTOActionType}
 */
proto.board.DTOAction.prototype.getType = function() {
  return /** @type{?proto.board.DTOActionType} */ (
    jspb.Message.getWrapperField(this, proto.board.DTOActionType, 7));
};


/**
 * @param {?proto.board.DTOActionType|undefined} value
 * @return {!proto.board.DTOAction} returns this
*/
proto.board.DTOAction.prototype.setType = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.board.DTOAction} returns this
 */
proto.board.DTOAction.prototype.clearType = function() {
  return this.setType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.board.DTOAction.prototype.hasType = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated DTOActionFieldValue fields_value = 8;
 * @return {!Array<!proto.board.DTOActionFieldValue>}
 */
proto.board.DTOAction.prototype.getFieldsValueList = function() {
  return /** @type{!Array<!proto.board.DTOActionFieldValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.board.DTOActionFieldValue, 8));
};


/**
 * @param {!Array<!proto.board.DTOActionFieldValue>} value
 * @return {!proto.board.DTOAction} returns this
*/
proto.board.DTOAction.prototype.setFieldsValueList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.board.DTOActionFieldValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.board.DTOActionFieldValue}
 */
proto.board.DTOAction.prototype.addFieldsValue = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.board.DTOActionFieldValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.board.DTOAction} returns this
 */
proto.board.DTOAction.prototype.clearFieldsValueList = function() {
  return this.setFieldsValueList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.board.DTOActionFieldValue.prototype.toObject = function(opt_includeInstance) {
  return proto.board.DTOActionFieldValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.board.DTOActionFieldValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.DTOActionFieldValue.toObject = function(includeInstance, msg) {
  var f, obj = {
actionField: (f = msg.getActionField()) && proto.board.DTOActionField.toObject(includeInstance, f),
value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.board.DTOActionFieldValue}
 */
proto.board.DTOActionFieldValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.board.DTOActionFieldValue;
  return proto.board.DTOActionFieldValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.board.DTOActionFieldValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.board.DTOActionFieldValue}
 */
proto.board.DTOActionFieldValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.board.DTOActionField;
      reader.readMessage(value,proto.board.DTOActionField.deserializeBinaryFromReader);
      msg.setActionField(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.board.DTOActionFieldValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.board.DTOActionFieldValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.board.DTOActionFieldValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.DTOActionFieldValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionField();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.board.DTOActionField.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional DTOActionField action_field = 1;
 * @return {?proto.board.DTOActionField}
 */
proto.board.DTOActionFieldValue.prototype.getActionField = function() {
  return /** @type{?proto.board.DTOActionField} */ (
    jspb.Message.getWrapperField(this, proto.board.DTOActionField, 1));
};


/**
 * @param {?proto.board.DTOActionField|undefined} value
 * @return {!proto.board.DTOActionFieldValue} returns this
*/
proto.board.DTOActionFieldValue.prototype.setActionField = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.board.DTOActionFieldValue} returns this
 */
proto.board.DTOActionFieldValue.prototype.clearActionField = function() {
  return this.setActionField(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.board.DTOActionFieldValue.prototype.hasActionField = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.board.DTOActionFieldValue.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOActionFieldValue} returns this
 */
proto.board.DTOActionFieldValue.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.board.DTOActionType.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.board.DTOActionType.prototype.toObject = function(opt_includeInstance) {
  return proto.board.DTOActionType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.board.DTOActionType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.DTOActionType.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
description: jspb.Message.getFieldWithDefault(msg, 3, ""),
icon: jspb.Message.getFieldWithDefault(msg, 4, ""),
templatesList: jspb.Message.toObjectList(msg.getTemplatesList(),
    proto.board.DTOActionTemplate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.board.DTOActionType}
 */
proto.board.DTOActionType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.board.DTOActionType;
  return proto.board.DTOActionType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.board.DTOActionType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.board.DTOActionType}
 */
proto.board.DTOActionType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    case 5:
      var value = new proto.board.DTOActionTemplate;
      reader.readMessage(value,proto.board.DTOActionTemplate.deserializeBinaryFromReader);
      msg.addTemplates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.board.DTOActionType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.board.DTOActionType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.board.DTOActionType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.DTOActionType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTemplatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.board.DTOActionTemplate.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.board.DTOActionType.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOActionType} returns this
 */
proto.board.DTOActionType.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.board.DTOActionType.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOActionType} returns this
 */
proto.board.DTOActionType.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string icon = 4;
 * @return {string}
 */
proto.board.DTOActionType.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOActionType} returns this
 */
proto.board.DTOActionType.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated DTOActionTemplate templates = 5;
 * @return {!Array<!proto.board.DTOActionTemplate>}
 */
proto.board.DTOActionType.prototype.getTemplatesList = function() {
  return /** @type{!Array<!proto.board.DTOActionTemplate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.board.DTOActionTemplate, 5));
};


/**
 * @param {!Array<!proto.board.DTOActionTemplate>} value
 * @return {!proto.board.DTOActionType} returns this
*/
proto.board.DTOActionType.prototype.setTemplatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.board.DTOActionTemplate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.board.DTOActionTemplate}
 */
proto.board.DTOActionType.prototype.addTemplates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.board.DTOActionTemplate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.board.DTOActionType} returns this
 */
proto.board.DTOActionType.prototype.clearTemplatesList = function() {
  return this.setTemplatesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.board.DTOActionTemplate.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.board.DTOActionTemplate.prototype.toObject = function(opt_includeInstance) {
  return proto.board.DTOActionTemplate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.board.DTOActionTemplate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.DTOActionTemplate.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
description: jspb.Message.getFieldWithDefault(msg, 3, ""),
configsList: jspb.Message.toObjectList(msg.getConfigsList(),
    proto.board.DTOActionConfig.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.board.DTOActionTemplate}
 */
proto.board.DTOActionTemplate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.board.DTOActionTemplate;
  return proto.board.DTOActionTemplate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.board.DTOActionTemplate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.board.DTOActionTemplate}
 */
proto.board.DTOActionTemplate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = new proto.board.DTOActionConfig;
      reader.readMessage(value,proto.board.DTOActionConfig.deserializeBinaryFromReader);
      msg.addConfigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.board.DTOActionTemplate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.board.DTOActionTemplate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.board.DTOActionTemplate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.DTOActionTemplate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getConfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.board.DTOActionConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.board.DTOActionTemplate.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOActionTemplate} returns this
 */
proto.board.DTOActionTemplate.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.board.DTOActionTemplate.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOActionTemplate} returns this
 */
proto.board.DTOActionTemplate.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated DTOActionConfig configs = 4;
 * @return {!Array<!proto.board.DTOActionConfig>}
 */
proto.board.DTOActionTemplate.prototype.getConfigsList = function() {
  return /** @type{!Array<!proto.board.DTOActionConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.board.DTOActionConfig, 4));
};


/**
 * @param {!Array<!proto.board.DTOActionConfig>} value
 * @return {!proto.board.DTOActionTemplate} returns this
*/
proto.board.DTOActionTemplate.prototype.setConfigsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.board.DTOActionConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.board.DTOActionConfig}
 */
proto.board.DTOActionTemplate.prototype.addConfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.board.DTOActionConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.board.DTOActionTemplate} returns this
 */
proto.board.DTOActionTemplate.prototype.clearConfigsList = function() {
  return this.setConfigsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.board.DTOActionConfig.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.board.DTOActionConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.board.DTOActionConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.board.DTOActionConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.DTOActionConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
defaultValue: jspb.Message.getFieldWithDefault(msg, 2, ""),
demoValue: jspb.Message.getFieldWithDefault(msg, 3, ""),
isRequired: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
useType: jspb.Message.getFieldWithDefault(msg, 5, 0),
actionField: (f = msg.getActionField()) && proto.board.DTOActionField.toObject(includeInstance, f),
cardViewsList: jspb.Message.toObjectList(msg.getCardViewsList(),
    proto.board.DTOCardView.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.board.DTOActionConfig}
 */
proto.board.DTOActionConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.board.DTOActionConfig;
  return proto.board.DTOActionConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.board.DTOActionConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.board.DTOActionConfig}
 */
proto.board.DTOActionConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDemoValue(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsRequired(value);
      break;
    case 5:
      var value = /** @type {!proto.board.UseType} */ (reader.readEnum());
      msg.setUseType(value);
      break;
    case 6:
      var value = new proto.board.DTOActionField;
      reader.readMessage(value,proto.board.DTOActionField.deserializeBinaryFromReader);
      msg.setActionField(value);
      break;
    case 7:
      var value = new proto.board.DTOCardView;
      reader.readMessage(value,proto.board.DTOCardView.deserializeBinaryFromReader);
      msg.addCardViews(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.board.DTOActionConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.board.DTOActionConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.board.DTOActionConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.DTOActionConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDefaultValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDemoValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIsRequired();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getUseType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getActionField();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.board.DTOActionField.serializeBinaryToWriter
    );
  }
  f = message.getCardViewsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.board.DTOCardView.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.board.DTOActionConfig.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOActionConfig} returns this
 */
proto.board.DTOActionConfig.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string default_value = 2;
 * @return {string}
 */
proto.board.DTOActionConfig.prototype.getDefaultValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOActionConfig} returns this
 */
proto.board.DTOActionConfig.prototype.setDefaultValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string demo_value = 3;
 * @return {string}
 */
proto.board.DTOActionConfig.prototype.getDemoValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOActionConfig} returns this
 */
proto.board.DTOActionConfig.prototype.setDemoValue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool is_required = 4;
 * @return {boolean}
 */
proto.board.DTOActionConfig.prototype.getIsRequired = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.board.DTOActionConfig} returns this
 */
proto.board.DTOActionConfig.prototype.setIsRequired = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional UseType use_type = 5;
 * @return {!proto.board.UseType}
 */
proto.board.DTOActionConfig.prototype.getUseType = function() {
  return /** @type {!proto.board.UseType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.board.UseType} value
 * @return {!proto.board.DTOActionConfig} returns this
 */
proto.board.DTOActionConfig.prototype.setUseType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional DTOActionField action_field = 6;
 * @return {?proto.board.DTOActionField}
 */
proto.board.DTOActionConfig.prototype.getActionField = function() {
  return /** @type{?proto.board.DTOActionField} */ (
    jspb.Message.getWrapperField(this, proto.board.DTOActionField, 6));
};


/**
 * @param {?proto.board.DTOActionField|undefined} value
 * @return {!proto.board.DTOActionConfig} returns this
*/
proto.board.DTOActionConfig.prototype.setActionField = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.board.DTOActionConfig} returns this
 */
proto.board.DTOActionConfig.prototype.clearActionField = function() {
  return this.setActionField(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.board.DTOActionConfig.prototype.hasActionField = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated DTOCardView card_views = 7;
 * @return {!Array<!proto.board.DTOCardView>}
 */
proto.board.DTOActionConfig.prototype.getCardViewsList = function() {
  return /** @type{!Array<!proto.board.DTOCardView>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.board.DTOCardView, 7));
};


/**
 * @param {!Array<!proto.board.DTOCardView>} value
 * @return {!proto.board.DTOActionConfig} returns this
*/
proto.board.DTOActionConfig.prototype.setCardViewsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.board.DTOCardView=} opt_value
 * @param {number=} opt_index
 * @return {!proto.board.DTOCardView}
 */
proto.board.DTOActionConfig.prototype.addCardViews = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.board.DTOCardView, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.board.DTOActionConfig} returns this
 */
proto.board.DTOActionConfig.prototype.clearCardViewsList = function() {
  return this.setCardViewsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.board.DTOCardView.prototype.toObject = function(opt_includeInstance) {
  return proto.board.DTOCardView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.board.DTOCardView} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.DTOCardView.toObject = function(includeInstance, msg) {
  var f, obj = {
row: jspb.Message.getFieldWithDefault(msg, 1, 0),
order: jspb.Message.getFieldWithDefault(msg, 2, 0),
variant: jspb.Message.getFieldWithDefault(msg, 3, 0),
statusName: jspb.Message.getFieldWithDefault(msg, 4, ""),
statusDescription: jspb.Message.getFieldWithDefault(msg, 5, ""),
statusColorHex: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.board.DTOCardView}
 */
proto.board.DTOCardView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.board.DTOCardView;
  return proto.board.DTOCardView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.board.DTOCardView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.board.DTOCardView}
 */
proto.board.DTOCardView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRow(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOrder(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVariant(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatusName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatusDescription(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatusColorHex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.board.DTOCardView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.board.DTOCardView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.board.DTOCardView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.DTOCardView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRow();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getOrder();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getVariant();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getStatusName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStatusDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStatusColorHex();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint32 row = 1;
 * @return {number}
 */
proto.board.DTOCardView.prototype.getRow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.board.DTOCardView} returns this
 */
proto.board.DTOCardView.prototype.setRow = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 order = 2;
 * @return {number}
 */
proto.board.DTOCardView.prototype.getOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.board.DTOCardView} returns this
 */
proto.board.DTOCardView.prototype.setOrder = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 variant = 3;
 * @return {number}
 */
proto.board.DTOCardView.prototype.getVariant = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.board.DTOCardView} returns this
 */
proto.board.DTOCardView.prototype.setVariant = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string status_name = 4;
 * @return {string}
 */
proto.board.DTOCardView.prototype.getStatusName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOCardView} returns this
 */
proto.board.DTOCardView.prototype.setStatusName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string status_description = 5;
 * @return {string}
 */
proto.board.DTOCardView.prototype.getStatusDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOCardView} returns this
 */
proto.board.DTOCardView.prototype.setStatusDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string status_color_HEX = 6;
 * @return {string}
 */
proto.board.DTOCardView.prototype.getStatusColorHex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOCardView} returns this
 */
proto.board.DTOCardView.prototype.setStatusColorHex = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.board.DTOActionField.prototype.toObject = function(opt_includeInstance) {
  return proto.board.DTOActionField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.board.DTOActionField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.DTOActionField.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
key: jspb.Message.getFieldWithDefault(msg, 2, ""),
name: jspb.Message.getFieldWithDefault(msg, 3, ""),
description: jspb.Message.getFieldWithDefault(msg, 4, ""),
typeKey: jspb.Message.getFieldWithDefault(msg, 5, ""),
typeName: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.board.DTOActionField}
 */
proto.board.DTOActionField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.board.DTOActionField;
  return proto.board.DTOActionField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.board.DTOActionField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.board.DTOActionField}
 */
proto.board.DTOActionField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeKey(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.board.DTOActionField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.board.DTOActionField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.board.DTOActionField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.board.DTOActionField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTypeKey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTypeName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.board.DTOActionField.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOActionField} returns this
 */
proto.board.DTOActionField.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.board.DTOActionField.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOActionField} returns this
 */
proto.board.DTOActionField.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.board.DTOActionField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOActionField} returns this
 */
proto.board.DTOActionField.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.board.DTOActionField.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOActionField} returns this
 */
proto.board.DTOActionField.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string type_key = 5;
 * @return {string}
 */
proto.board.DTOActionField.prototype.getTypeKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOActionField} returns this
 */
proto.board.DTOActionField.prototype.setTypeKey = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string type_name = 6;
 * @return {string}
 */
proto.board.DTOActionField.prototype.getTypeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.board.DTOActionField} returns this
 */
proto.board.DTOActionField.prototype.setTypeName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * @enum {number}
 */
proto.board.UseType = {
  UNKNOWN: 0,
  CONSTRUCT: 2,
  TECH: 4,
  DESCRIPTION: 8,
  CONTEXT: 16
};

goog.object.extend(exports, proto.board);
