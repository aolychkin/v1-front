// source: action.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.action.DTOAction', null, global);
goog.exportSymbol('proto.action.DTOActionField', null, global);
goog.exportSymbol('proto.action.DTOCard', null, global);
goog.exportSymbol('proto.action.DTOFieldConfig', null, global);
goog.exportSymbol('proto.action.DTOFieldType', null, global);
goog.exportSymbol('proto.action.GetActionsByBoardRequest', null, global);
goog.exportSymbol('proto.action.GetActionsByBoardResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.action.GetActionsByBoardRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.action.GetActionsByBoardRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.action.GetActionsByBoardRequest.displayName = 'proto.action.GetActionsByBoardRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.action.GetActionsByBoardResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.action.GetActionsByBoardResponse.repeatedFields_, null);
};
goog.inherits(proto.action.GetActionsByBoardResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.action.GetActionsByBoardResponse.displayName = 'proto.action.GetActionsByBoardResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.action.DTOCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.action.DTOCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.action.DTOCard.displayName = 'proto.action.DTOCard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.action.DTOAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.action.DTOAction.repeatedFields_, null);
};
goog.inherits(proto.action.DTOAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.action.DTOAction.displayName = 'proto.action.DTOAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.action.DTOActionField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.action.DTOActionField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.action.DTOActionField.displayName = 'proto.action.DTOActionField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.action.DTOFieldConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.action.DTOFieldConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.action.DTOFieldConfig.displayName = 'proto.action.DTOFieldConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.action.DTOFieldType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.action.DTOFieldType.repeatedFields_, null);
};
goog.inherits(proto.action.DTOFieldType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.action.DTOFieldType.displayName = 'proto.action.DTOFieldType';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.action.GetActionsByBoardRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.action.GetActionsByBoardRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.action.GetActionsByBoardRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.action.GetActionsByBoardRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
boardId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.action.GetActionsByBoardRequest}
 */
proto.action.GetActionsByBoardRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.action.GetActionsByBoardRequest;
  return proto.action.GetActionsByBoardRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.action.GetActionsByBoardRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.action.GetActionsByBoardRequest}
 */
proto.action.GetActionsByBoardRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoardId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.action.GetActionsByBoardRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.action.GetActionsByBoardRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.action.GetActionsByBoardRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.action.GetActionsByBoardRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoardId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string board_id = 1;
 * @return {string}
 */
proto.action.GetActionsByBoardRequest.prototype.getBoardId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.action.GetActionsByBoardRequest} returns this
 */
proto.action.GetActionsByBoardRequest.prototype.setBoardId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.action.GetActionsByBoardResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.action.GetActionsByBoardResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.action.GetActionsByBoardResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.action.GetActionsByBoardResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.action.GetActionsByBoardResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
cardsList: jspb.Message.toObjectList(msg.getCardsList(),
    proto.action.DTOCard.toObject, includeInstance),
fieldConfigsList: jspb.Message.toObjectList(msg.getFieldConfigsList(),
    proto.action.DTOFieldConfig.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.action.GetActionsByBoardResponse}
 */
proto.action.GetActionsByBoardResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.action.GetActionsByBoardResponse;
  return proto.action.GetActionsByBoardResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.action.GetActionsByBoardResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.action.GetActionsByBoardResponse}
 */
proto.action.GetActionsByBoardResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.action.DTOCard;
      reader.readMessage(value,proto.action.DTOCard.deserializeBinaryFromReader);
      msg.addCards(value);
      break;
    case 2:
      var value = new proto.action.DTOFieldConfig;
      reader.readMessage(value,proto.action.DTOFieldConfig.deserializeBinaryFromReader);
      msg.addFieldConfigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.action.GetActionsByBoardResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.action.GetActionsByBoardResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.action.GetActionsByBoardResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.action.GetActionsByBoardResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.action.DTOCard.serializeBinaryToWriter
    );
  }
  f = message.getFieldConfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.action.DTOFieldConfig.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DTOCard cards = 1;
 * @return {!Array<!proto.action.DTOCard>}
 */
proto.action.GetActionsByBoardResponse.prototype.getCardsList = function() {
  return /** @type{!Array<!proto.action.DTOCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.action.DTOCard, 1));
};


/**
 * @param {!Array<!proto.action.DTOCard>} value
 * @return {!proto.action.GetActionsByBoardResponse} returns this
*/
proto.action.GetActionsByBoardResponse.prototype.setCardsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.action.DTOCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.action.DTOCard}
 */
proto.action.GetActionsByBoardResponse.prototype.addCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.action.DTOCard, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.action.GetActionsByBoardResponse} returns this
 */
proto.action.GetActionsByBoardResponse.prototype.clearCardsList = function() {
  return this.setCardsList([]);
};


/**
 * repeated DTOFieldConfig field_configs = 2;
 * @return {!Array<!proto.action.DTOFieldConfig>}
 */
proto.action.GetActionsByBoardResponse.prototype.getFieldConfigsList = function() {
  return /** @type{!Array<!proto.action.DTOFieldConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.action.DTOFieldConfig, 2));
};


/**
 * @param {!Array<!proto.action.DTOFieldConfig>} value
 * @return {!proto.action.GetActionsByBoardResponse} returns this
*/
proto.action.GetActionsByBoardResponse.prototype.setFieldConfigsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.action.DTOFieldConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.action.DTOFieldConfig}
 */
proto.action.GetActionsByBoardResponse.prototype.addFieldConfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.action.DTOFieldConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.action.GetActionsByBoardResponse} returns this
 */
proto.action.GetActionsByBoardResponse.prototype.clearFieldConfigsList = function() {
  return this.setFieldConfigsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.action.DTOCard.prototype.toObject = function(opt_includeInstance) {
  return proto.action.DTOCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.action.DTOCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.action.DTOCard.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
order: jspb.Message.getFieldWithDefault(msg, 2, 0),
columnId: jspb.Message.getFieldWithDefault(msg, 3, ""),
action: (f = msg.getAction()) && proto.action.DTOAction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.action.DTOCard}
 */
proto.action.DTOCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.action.DTOCard;
  return proto.action.DTOCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.action.DTOCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.action.DTOCard}
 */
proto.action.DTOCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOrder(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumnId(value);
      break;
    case 4:
      var value = new proto.action.DTOAction;
      reader.readMessage(value,proto.action.DTOAction.deserializeBinaryFromReader);
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.action.DTOCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.action.DTOCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.action.DTOCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.action.DTOCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrder();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getColumnId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAction();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.action.DTOAction.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.action.DTOCard.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.action.DTOCard} returns this
 */
proto.action.DTOCard.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 order = 2;
 * @return {number}
 */
proto.action.DTOCard.prototype.getOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.action.DTOCard} returns this
 */
proto.action.DTOCard.prototype.setOrder = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string column_id = 3;
 * @return {string}
 */
proto.action.DTOCard.prototype.getColumnId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.action.DTOCard} returns this
 */
proto.action.DTOCard.prototype.setColumnId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional DTOAction action = 4;
 * @return {?proto.action.DTOAction}
 */
proto.action.DTOCard.prototype.getAction = function() {
  return /** @type{?proto.action.DTOAction} */ (
    jspb.Message.getWrapperField(this, proto.action.DTOAction, 4));
};


/**
 * @param {?proto.action.DTOAction|undefined} value
 * @return {!proto.action.DTOCard} returns this
*/
proto.action.DTOCard.prototype.setAction = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.action.DTOCard} returns this
 */
proto.action.DTOCard.prototype.clearAction = function() {
  return this.setAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.action.DTOCard.prototype.hasAction = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.action.DTOAction.repeatedFields_ = [6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.action.DTOAction.prototype.toObject = function(opt_includeInstance) {
  return proto.action.DTOAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.action.DTOAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.action.DTOAction.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
key: jspb.Message.getFieldWithDefault(msg, 2, ""),
actionNum: jspb.Message.getFieldWithDefault(msg, 4, 0),
stepId: jspb.Message.getFieldWithDefault(msg, 5, ""),
sprintIdsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
fieldsList: jspb.Message.toObjectList(msg.getFieldsList(),
    proto.action.DTOActionField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.action.DTOAction}
 */
proto.action.DTOAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.action.DTOAction;
  return proto.action.DTOAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.action.DTOAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.action.DTOAction}
 */
proto.action.DTOAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActionNum(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStepId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addSprintIds(value);
      break;
    case 7:
      var value = new proto.action.DTOActionField;
      reader.readMessage(value,proto.action.DTOActionField.deserializeBinaryFromReader);
      msg.addFields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.action.DTOAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.action.DTOAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.action.DTOAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.action.DTOAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getActionNum();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getStepId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSprintIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.action.DTOActionField.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.action.DTOAction.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.action.DTOAction} returns this
 */
proto.action.DTOAction.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.action.DTOAction.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.action.DTOAction} returns this
 */
proto.action.DTOAction.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 action_num = 4;
 * @return {number}
 */
proto.action.DTOAction.prototype.getActionNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.action.DTOAction} returns this
 */
proto.action.DTOAction.prototype.setActionNum = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string step_id = 5;
 * @return {string}
 */
proto.action.DTOAction.prototype.getStepId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.action.DTOAction} returns this
 */
proto.action.DTOAction.prototype.setStepId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated string sprint_ids = 6;
 * @return {!Array<string>}
 */
proto.action.DTOAction.prototype.getSprintIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.action.DTOAction} returns this
 */
proto.action.DTOAction.prototype.setSprintIdsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.action.DTOAction} returns this
 */
proto.action.DTOAction.prototype.addSprintIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.action.DTOAction} returns this
 */
proto.action.DTOAction.prototype.clearSprintIdsList = function() {
  return this.setSprintIdsList([]);
};


/**
 * repeated DTOActionField fields = 7;
 * @return {!Array<!proto.action.DTOActionField>}
 */
proto.action.DTOAction.prototype.getFieldsList = function() {
  return /** @type{!Array<!proto.action.DTOActionField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.action.DTOActionField, 7));
};


/**
 * @param {!Array<!proto.action.DTOActionField>} value
 * @return {!proto.action.DTOAction} returns this
*/
proto.action.DTOAction.prototype.setFieldsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.action.DTOActionField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.action.DTOActionField}
 */
proto.action.DTOAction.prototype.addFields = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.action.DTOActionField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.action.DTOAction} returns this
 */
proto.action.DTOAction.prototype.clearFieldsList = function() {
  return this.setFieldsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.action.DTOActionField.prototype.toObject = function(opt_includeInstance) {
  return proto.action.DTOActionField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.action.DTOActionField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.action.DTOActionField.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
value: jspb.Message.getFieldWithDefault(msg, 2, ""),
configId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.action.DTOActionField}
 */
proto.action.DTOActionField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.action.DTOActionField;
  return proto.action.DTOActionField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.action.DTOActionField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.action.DTOActionField}
 */
proto.action.DTOActionField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfigId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.action.DTOActionField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.action.DTOActionField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.action.DTOActionField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.action.DTOActionField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConfigId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.action.DTOActionField.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.action.DTOActionField} returns this
 */
proto.action.DTOActionField.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.action.DTOActionField.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.action.DTOActionField} returns this
 */
proto.action.DTOActionField.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string config_id = 3;
 * @return {string}
 */
proto.action.DTOActionField.prototype.getConfigId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.action.DTOActionField} returns this
 */
proto.action.DTOActionField.prototype.setConfigId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.action.DTOFieldConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.action.DTOFieldConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.action.DTOFieldConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.action.DTOFieldConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
alias: jspb.Message.getFieldWithDefault(msg, 3, ""),
fieldType: (f = msg.getFieldType()) && proto.action.DTOFieldType.toObject(includeInstance, f),
defaultvalue: jspb.Message.getFieldWithDefault(msg, 5, ""),
availablevalues: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.action.DTOFieldConfig}
 */
proto.action.DTOFieldConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.action.DTOFieldConfig;
  return proto.action.DTOFieldConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.action.DTOFieldConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.action.DTOFieldConfig}
 */
proto.action.DTOFieldConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias(value);
      break;
    case 4:
      var value = new proto.action.DTOFieldType;
      reader.readMessage(value,proto.action.DTOFieldType.deserializeBinaryFromReader);
      msg.setFieldType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultvalue(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvailablevalues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.action.DTOFieldConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.action.DTOFieldConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.action.DTOFieldConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.action.DTOFieldConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAlias();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFieldType();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.action.DTOFieldType.serializeBinaryToWriter
    );
  }
  f = message.getDefaultvalue();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAvailablevalues();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.action.DTOFieldConfig.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.action.DTOFieldConfig} returns this
 */
proto.action.DTOFieldConfig.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.action.DTOFieldConfig.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.action.DTOFieldConfig} returns this
 */
proto.action.DTOFieldConfig.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string alias = 3;
 * @return {string}
 */
proto.action.DTOFieldConfig.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.action.DTOFieldConfig} returns this
 */
proto.action.DTOFieldConfig.prototype.setAlias = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional DTOFieldType field_type = 4;
 * @return {?proto.action.DTOFieldType}
 */
proto.action.DTOFieldConfig.prototype.getFieldType = function() {
  return /** @type{?proto.action.DTOFieldType} */ (
    jspb.Message.getWrapperField(this, proto.action.DTOFieldType, 4));
};


/**
 * @param {?proto.action.DTOFieldType|undefined} value
 * @return {!proto.action.DTOFieldConfig} returns this
*/
proto.action.DTOFieldConfig.prototype.setFieldType = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.action.DTOFieldConfig} returns this
 */
proto.action.DTOFieldConfig.prototype.clearFieldType = function() {
  return this.setFieldType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.action.DTOFieldConfig.prototype.hasFieldType = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string defaultValue = 5;
 * @return {string}
 */
proto.action.DTOFieldConfig.prototype.getDefaultvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.action.DTOFieldConfig} returns this
 */
proto.action.DTOFieldConfig.prototype.setDefaultvalue = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string availableValues = 7;
 * @return {string}
 */
proto.action.DTOFieldConfig.prototype.getAvailablevalues = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.action.DTOFieldConfig} returns this
 */
proto.action.DTOFieldConfig.prototype.setAvailablevalues = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.action.DTOFieldType.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.action.DTOFieldType.prototype.toObject = function(opt_includeInstance) {
  return proto.action.DTOFieldType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.action.DTOFieldType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.action.DTOFieldType.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
alias: jspb.Message.getFieldWithDefault(msg, 3, ""),
isCustom: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
availableSizesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.action.DTOFieldType}
 */
proto.action.DTOFieldType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.action.DTOFieldType;
  return proto.action.DTOFieldType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.action.DTOFieldType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.action.DTOFieldType}
 */
proto.action.DTOFieldType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsCustom(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addAvailableSizes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.action.DTOFieldType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.action.DTOFieldType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.action.DTOFieldType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.action.DTOFieldType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAlias();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIsCustom();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getAvailableSizesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.action.DTOFieldType.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.action.DTOFieldType} returns this
 */
proto.action.DTOFieldType.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.action.DTOFieldType.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.action.DTOFieldType} returns this
 */
proto.action.DTOFieldType.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string alias = 3;
 * @return {string}
 */
proto.action.DTOFieldType.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.action.DTOFieldType} returns this
 */
proto.action.DTOFieldType.prototype.setAlias = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool is_custom = 4;
 * @return {boolean}
 */
proto.action.DTOFieldType.prototype.getIsCustom = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.action.DTOFieldType} returns this
 */
proto.action.DTOFieldType.prototype.setIsCustom = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * repeated string available_sizes = 5;
 * @return {!Array<string>}
 */
proto.action.DTOFieldType.prototype.getAvailableSizesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.action.DTOFieldType} returns this
 */
proto.action.DTOFieldType.prototype.setAvailableSizesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.action.DTOFieldType} returns this
 */
proto.action.DTOFieldType.prototype.addAvailableSizes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.action.DTOFieldType} returns this
 */
proto.action.DTOFieldType.prototype.clearAvailableSizesList = function() {
  return this.setAvailableSizesList([]);
};


goog.object.extend(exports, proto.action);
